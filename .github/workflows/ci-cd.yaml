name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build and test
        run: ./gradlew build

      - name: Debug Workflow on Build
        run: |
          pwd
          ls -l build/libs

  #release:
  #  runs-on: ubuntu-latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#    needs: build

#    steps:
      - name: Set Release Tag
        id: set_release_tag
        run: echo "RELEASE_TAG=v1.0.0" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false

      - name: Debug Workflow on Release
        run: |
          pwd
          ls
          # ls -l build/libs

      - name: Upload Artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: keda-newrelic-app
          path: build/libs

  #deploy:
  #  runs-on: ubuntu-latest

  #  needs: release

  #  steps:
  #    - uses: actions/checkout@v3
  #      with:
  #        fetch-depth: 0

      
      - name: Debug Workflow After Gradle Build
        run: |
          pwd
          ls -l
          ls -l build
          ls -l build/libs
                
      - name: Login to github packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release Tag
        id: set_release_tags
        run: echo "RELEASE_TAG=v1.0.0" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Docker build and push 
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ env.RELEASE_TAG }} .
          docker push ghcr.io/${{ github.repository }}:${{ env.RELEASE_TAG }}
